// ==========================================================================
// UTILS
//
// General utility mixins
// ==========================================================================

// ==========================================================================
// MATHS
// ==========================================================================

// GREATEST COMMON FACTOR
// Finds the greatest common factor of two integers
// ==========================================================================
@function gcf($a, $b) {
    @if $b == 0 { @return $a; }
    @else { @return gcf($b, $a % $b) }
}


// ==========================================================================
// INTEROGRATION
// ==========================================================================

// CONTAINS
// Check if a list contains a value
// ==========================================================================
@function contains($list, $value) {
    @if type-of($list) == list { @return not not index($list, $value); }
    @else { @return $list == $value; }
}



// ==========================================================================
// TYPOGRAPHY
// ==========================================================================

// REM
// output rem values with px fallback for oldie
// ==========================================================================
@mixin rem($property, $values) {
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 16 + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * 16 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}






// HEADINGS
// Easily create and apply styles to multiple heading levels
// ==========================================================================
@mixin headings($from: 1, $to: 6){
    @for $i from $from through $to{
      h#{$i}, .h#{$i} {
        @content
      }
    }
}



// ==========================================================================
// HELPER
// ==========================================================================

// PARSEINT
// parse an integar from a value
// ==========================================================================
@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}